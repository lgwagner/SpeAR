/*
 * generated by Xtext
 */
package com.rockwellcollins.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import com.rockwellcollins.spear.Constant;
import com.rockwellcollins.spear.EnumValue;
import com.rockwellcollins.spear.Expr;
import com.rockwellcollins.spear.File;
import com.rockwellcollins.spear.Import;
import com.rockwellcollins.spear.NamedTypeDef;
import com.rockwellcollins.spear.Pattern;
import com.rockwellcollins.spear.RecordAccessExpr;
import com.rockwellcollins.spear.RecordExpr;
import com.rockwellcollins.spear.RecordTypeDef;
import com.rockwellcollins.spear.RecordUpdateExpr;
import com.rockwellcollins.spear.Variable;
import com.rockwellcollins.spear.utilities.Utilities;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class SpearScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	IScope scope_FieldExpr_field(RecordExpr re, EReference reference) {
		return Scopes.scopeFor(re.getType().getFields());
	}

	IScope scope_RecordAccessExpr_field(RecordAccessExpr e, EReference reference) {
		return getRecordScope(e.getRecord());
	}

	IScope scope_RecordUpdateExpr_field(RecordUpdateExpr e, EReference reference) {
		return getRecordScope(e.getRecord());
	}

	private IScope getRecordScope(Expr expr) {
		RecordTypeDef record = CompositeTypeLookup.getRecordType(expr);
		if (record != null) {
			return Scopes.scopeFor(record.getFields());
		} else {
			return IScope.NULLSCOPE;
		}
	}

	IScope scope_Variable(Pattern p, EReference ref) {
		return getPatternScope(p, ref);
	}

	IScope scope_IdRef(Pattern p, EReference ref) {
		return getPatternScope(p, ref);
	}

	private IScope getFileScopeForPattern(File f, IScope scope) {
		scope = Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(f, EnumValue.class), scope);
		scope = Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(f, Constant.class), scope);
		return scope;
	}

	private IScope getScopeForImportChain(File root, IScope scope) {
		scope = getFileScopeForPattern(root, scope);
		for (Import im : root.getImports()) {
			File importedFile = Utilities.getImportedFile(im);
			scope = getScopeForImportChain(importedFile, scope);
		}
		return scope;
	}

	private IScope getPatternScope(Pattern p, EReference ref) {
		File f = Utilities.getRoot(p);
		IScope scope = IScope.NULLSCOPE;
		scope = Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(p, Variable.class), getScopeForImportChain(f, scope));
		return scope;
	}
}
