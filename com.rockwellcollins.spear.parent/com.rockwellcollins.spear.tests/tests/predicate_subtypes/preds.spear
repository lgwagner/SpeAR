Specification preds

Units:
	m 'meters'
	deg 'degrees'

Types:
	distance : real m
	degrees : real deg
	
	degrees_alt: {d : degrees | 0.0 deg < d and d < 360.0 deg}
	degrees_alt2: {d : real | 0.0  < d and d < 360.0 } deg
	
	coordinate: record {x : distance, y : distance}
	quadrant1 : {co : coordinate | co.x > 0.0 m and co.y > 0.0 m}
	quadrant2 : {co : coordinate | co.x < 0.0 m and co.y > 0.0 m}
	why_would_you_do_this: {co : coordinate | co.x > 0.0 m implies co.y > 0.0 m}
	
	posreal: {r : real | r > 0.0} 
	nonneg: {i : int | i >= 0}
	posint: {i : nonneg | i > 0}
	
	/* not much else I can do with arrays since our array expression 
	 * language (and JKind's is fairly limited)  */
	list: posint[3]
	
	list2_sub : int[3]
	list2 : { i : list2_sub | i[0] > 0 and i[1] > 0 and i[2] > 0 }
	
	
Inputs:
	da1 : degrees_alt
	da2 : degrees_alt2
	
	s : coordinate
	t : quadrant1
	u : quadrant2
	v : why_would_you_do_this
	x : posreal
	y : posint
	z : list
	
Outputs:
	//does not conflict in scope with the variable defined in degrees_alt or degrees alt2
	d : int
	c1 : coordinate
	c2 : quadrant1
	c3 : quadrant2
	x_out : posreal
	y_out : posint

State:
	state1 : why_would_you_do_this
	z_state : list2

Macros:
	m1 : quadrant2 = s { x := u.x }{ y := t.y }

Assumptions:
	//autogenerated

Requirements:
	//should this be allowed?
	r0: c1 == c2
	r1: state1 == v { x := m1.x }
	r2: x_out == x - 1.5
	r3: y_out == y + 232342323
	r4: z_state == z [0 := 5][1 := 23][2 := y_out]

Properties:
	//autogenerated
	p0: false => true

