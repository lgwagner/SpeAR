Specification microwave

Imports:
	import "microwave_definitions.spear"
	import "keypad_processing.spear"
	import "compute_time.spear"
	import "reverse_time.spear"
	import "mode_logic.spear"

Inputs:
	user_input : user_input_type
	door_closed : bool

Outputs:
	left_digit : int
	middle_digit : int
	right_digit : int

State:
	microwave_mode : mode_type
	seconds_remaining : int
	
	left_SETUP : int
	middle_SETUP : int
	right_SETUP : int
	
	left_RUNNING : int
	middle_RUNNING : int
	right_RUNNING : int
	
	s2c_SETUP : int
	s2c_RUNNING : int

Macros:
	clear : bool = (user_input == CLEAR)
	start : bool = (user_input == START)
	seconds_to_cook : int = left_digit * 60 + middle_digit * 10 + right_digit

Assumptions:

Requirements:
	r1: |microwave_mode,seconds_remaining| == spec mode_logic(clear, start, door_closed, seconds_to_cook)
	r2: |left_SETUP,middle_SETUP,right_SETUP| == spec keypad_processing(user_input)
	r3: |left_RUNNING,middle_RUNNING,right_RUNNING| == spec reverse_time(seconds_remaining)
	r4: s2c_SETUP == spec compute_time(left_SETUP,middle_SETUP,right_SETUP)
	r5: s2c_RUNNING == previous seconds_to_cook with initial value 0
	
	rl: if microwave_mode==SETUP then left_digit == left_SETUP else left_digit == left_RUNNING
	rm: if microwave_mode==SETUP then middle_digit == middle_SETUP else middle_digit == middle_RUNNING
	rr: if microwave_mode==SETUP then right_digit == right_SETUP else right_digit == right_RUNNING
	
	r_s2c: if microwave_mode==SETUP then seconds_to_cook == s2c_SETUP else seconds_to_cook == s2c_RUNNING 
	
Properties: 
	p_init: initially(microwave_mode == SETUP)
	p0: microwave_mode == COOKING implies door_closed
	p1: before start implies microwave_mode == SETUP
	p2: 0 <= left_digit and left_digit <= 9
	p3: 0 <= middle_digit and middle_digit <= 9
	p4: 0 <= right_digit and right_digit <= 9
	