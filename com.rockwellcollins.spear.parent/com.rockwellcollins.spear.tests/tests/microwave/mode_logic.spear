Specification mode_logic

Imports:
	import "microwave_definitions.spear"

Types:

Inputs:
	clear : bool
	start : bool
	door_closed : bool
	seconds_to_cook : int

Outputs:
	microwave_mode : mode_type
	seconds_remaining : int

Macros:
	pre_mode : mode_type = previous microwave_mode with initial value SETUP
	pre_mode_is_setup : bool = pre_mode == SETUP
	pre_mode_is_cooking : bool = pre_mode == COOKING
	pre_mode_is_suspended : bool = pre_mode == SUSPENDED	
	seconds_to_cook_positive : bool = seconds_to_cook > 0
	seconds_remaining_positive : bool = seconds_remaining > 0
	pre_seconds_remaining : int = previous seconds_remaining with initial value 0
	
Assumptions:
	a0: seconds_to_cook >= 1
	
Requirements:
	r1: if microwave_mode == SETUP 
		 then seconds_remaining == seconds_to_cook 
		 else if microwave_mode == SUSPENDED
		 then seconds_remaining == pre_seconds_remaining
		 else seconds_remaining == pre_seconds_remaining - 1
		 
	r2: (pre_mode_is_setup and (not start or clear or not seconds_to_cook_positive)) implies microwave_mode == SETUP
	r3: (pre_mode_is_setup and (start and not clear and door_closed) and seconds_to_cook_positive) implies (microwave_mode == COOKING)
	r4: (pre_mode_is_setup and (start and not clear and not door_closed) and seconds_to_cook_positive) implies (microwave_mode == SUSPENDED)
	
	r5: pre_mode_is_cooking and not seconds_remaining_positive implies microwave_mode == SETUP
	r6: pre_mode_is_cooking and (not door_closed or clear) implies microwave_mode == SUSPENDED
	r7: pre_mode_is_cooking and (door_closed and not clear and seconds_to_cook_positive) implies microwave_mode == COOKING
		  
	r8: pre_mode_is_suspended and (not door_closed and not clear) implies microwave_mode == SUSPENDED
	r9: pre_mode_is_suspended and (door_closed and start and not clear) implies microwave_mode == COOKING
	r10: pre_mode_is_suspended and clear implies microwave_mode == SETUP
	
Guarantees:
	p1: (microwave_mode == COOKING) => door_closed
	p2: (microwave_mode == COOKING) => (seconds_remaining < pre_seconds_remaining)
	p3: (microwave_mode == SUSPENDED) => (seconds_remaining == pre_seconds_remaining)
	p4: before start implies microwave_mode == SETUP
	
	